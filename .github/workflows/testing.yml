name: Testing

on: [push, pull_request]

jobs:
  Pre-Commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.5
    - name: Set Cache Key
      run: echo "::set-env name=PY::$(python --version --version | sha256sum | cut -d' ' -f1)"
    - uses: actions/cache@v1
      with:
        path: ~/.cache/pre-commit
        key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
    - uses: pre-commit/action@v1.0.1

  Docs:
    runs-on: ubuntu-latest
    needs: Pre-Commit

    timeout-minutes: 10

    steps:
    - uses: actions/checkout@v2

    - name: Set up Python 3.7 For Nox
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Doc Requirements
      run: |
        nox --force-color -e docs --install-only

    - name: Build Docs
      env:
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e docs

  Linux:
    runs-on: ubuntu-latest
    needs: Pre-Commit

    timeout-minutes: 10

    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        python-version:
          - 3.5
          - 3.6
          - 3.7
        salt-version:
          - salt==3000.1
#          - salt==master

    steps:
    - uses: actions/checkout@v2
#    - uses: actions/checkout@v2
#      with:
#        repository: s0undt3ch/salt
#        ref: hotfix/version-parsing
#        path: salt-checkout

    - name: Set up Python 3.7 For Nox
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Test Requirements
      env:
        USE_SYSTEM_PYTHON: YES
        SALT_REQUIREMENT: ${{ matrix.salt-version }}
      run: |
        nox --force-color -e tests-system-python --install-only

    - name: Test
      env:
        USE_SYSTEM_PYTHON: YES
        SALT_REQUIREMENT: ${{ matrix.salt-version }}
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-system-python -- -s -vv -ra --log-cli-level=debug --log-file-level=debug --log-file=runtests.log --junitxml=junit-report.xml tests/

    - name: Upload Test Results
      if: always()
      shell: bash
      env:
        REPORT_CI_TOKEN: ${{ secrets.REPORT_CI_TOKEN }}
      run: |
        curl -s https://raw.githubusercontent.com/report-ci/scripts/master/upload.py | \
          python - \
          --include='junit-report.xml' \
          --framework=pytest \
          --merge ".*" \
          --name="${{ runner.os }} Py${{ matrix.python-version }}" || echo "Failed to upload test results"

    - name: Create CodeCov Flags
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info), '_'.join(str(v) for v in '${{ matrix.salt-version }}'.replace('==', '_').split('.'))))")

    - name: Upload Salt Factories Code Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: ${{ steps.codecov-flags.outputs.flags }},factories
        name: ${{ runner.os }}-Py${{ matrix.python-version }}-${{ matrix.salt-version }}-factories
        file: ./saltfactories.xml
        fail_ci_if_error: false

    - name: Upload Salt Factories Tests Code Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: ${{ steps.codecov-flags.outputs.flags }},tests
        name: ${{ runner.os }}-Py${{ matrix.python-version }}-${{ matrix.salt-version }}-tests
        file: ./tests.xml
        fail_ci_if_error: false

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.salt-version }}.log
        #name: runtests-${{ runner.os }}-py${{ matrix.python-version }}.log
        path: runtests.log

  Windows:
    runs-on: windows-latest
    needs: Pre-Commit

    timeout-minutes: 40

    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        python-version:
          - 3.5
          - 3.6
#          - 3.7
        salt-version:
          - salt==3000.1
#          - salt==master

    steps:
    - uses: actions/checkout@v2
#    - uses: actions/checkout@v2
#      with:
#        repository: s0undt3ch/salt
#        ref: hotfix/version-parsing
#        path: salt-checkout

    - name: Set up Python 3.7 For Nox
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Test Requirements
      shell: bash
      env:
        USE_SYSTEM_PYTHON: YES
        SALT_REQUIREMENT: ${{ matrix.salt-version }}
      run: |
        export PATH="/C/Program Files (x86)/Windows Kits/10/bin/10.0.18362.0/x64;$PATH"
        nox --force-color -e tests-system-python --install-only

    - name: Test
      shell: bash
      env:
        USE_SYSTEM_PYTHON: YES
        SALT_REQUIREMENT: ${{ matrix.salt-version }}
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        export PATH="/C/Program Files (x86)/Windows Kits/10/bin/10.0.18362.0/x64;$PATH"
        nox --force-color -e tests-system-python -- -s -vv -ra --log-cli-level=debug --log-file-level=debug --log-file=runtests.log --junitxml=junit-report.xml tests/

    - name: Upload Test Results
      if: always()
      shell: bash
      env:
        REPORT_CI_TOKEN: ${{ secrets.REPORT_CI_TOKEN }}
      run: |
        curl -s https://raw.githubusercontent.com/report-ci/scripts/master/upload.py | \
          python - \
          --include='junit-report.xml' \
          --framework=pytest \
          --merge ".*" \
          --name="${{ runner.os }} Py${{ matrix.python-version }}" || echo "Failed to upload test results"

    - name: Create CodeCov Flags
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info), '_'.join(str(v) for v in '${{ matrix.salt-version }}'.replace('==', '_').split('.'))))")

    - name: Upload Salt Factories Code Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: ${{ steps.codecov-flags.outputs.flags }},factories
        name: ${{ runner.os }}-Py${{ matrix.python-version }}-${{ matrix.salt-version }}-factories
        file: ./saltfactories.xml
        fail_ci_if_error: false

    - name: Upload Salt Factories Tests Code Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: ${{ steps.codecov-flags.outputs.flags }},tests
        name: ${{ runner.os }}-Py${{ matrix.python-version }}-${{ matrix.salt-version }}-tests
        file: ./tests.xml
        fail_ci_if_error: false

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.salt-version }}.log
        #name: runtests-${{ runner.os }}-py${{ matrix.python-version }}.log
        path: runtests.log

  macOS:
    runs-on: macOS-latest
    needs: Pre-Commit

    timeout-minutes: 30

    strategy:
      fail-fast: false
      max-parallel: 2
      matrix:
        python-version:
          - 3.5
          - 3.6
          - 3.7
        salt-version:
          - salt==3000.1
#          - salt==master

    steps:
    - uses: actions/checkout@v2
#    - uses: actions/checkout@v2
#      with:
#        repository: s0undt3ch/salt
#        ref: hotfix/version-parsing
#        path: salt-checkout

    - name: Set up Python 3.7 For Nox
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Test Requirements
      env:
        USE_SYSTEM_PYTHON: YES
        SALT_REQUIREMENT: ${{ matrix.salt-version }}
      run: |
        nox --force-color -e tests-system-python --install-only

    - name: Test
      env:
        USE_SYSTEM_PYTHON: YES
        SALT_REQUIREMENT: ${{ matrix.salt-version }}
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-system-python -- -s -vv -ra --log-cli-level=debug --log-file-level=debug --log-file=runtests.log --junitxml=junit-report.xml tests/

    - name: Upload Test Results
      if: always()
      shell: bash
      env:
        REPORT_CI_TOKEN: ${{ secrets.REPORT_CI_TOKEN }}
      run: |
        curl -s https://raw.githubusercontent.com/report-ci/scripts/master/upload.py | \
          python - \
          --include='junit-report.xml' \
          --framework=pytest \
          --merge ".*" \
          --name="${{ runner.os }} Py${{ matrix.python-version }}" || echo "Failed to upload test results"

    - name: Create CodeCov Flags
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{},{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info), '_'.join(str(v) for v in '${{ matrix.salt-version }}'.replace('==', '_').split('.'))))")

    - name: Upload Salt Factories Code Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: ${{ steps.codecov-flags.outputs.flags }},factories
        name: ${{ runner.os }}-Py${{ matrix.python-version }}-${{ matrix.salt-version }}-factories
        file: ./saltfactories.xml
        fail_ci_if_error: false

    - name: Upload Salt Factories Tests Code Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        flags: ${{ steps.codecov-flags.outputs.flags }},tests
        name: ${{ runner.os }}-Py${{ matrix.python-version }}-${{ matrix.salt-version }}-tests
        file: ./tests.xml
        fail_ci_if_error: false

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: runtests-${{ runner.os }}-py${{ matrix.python-version }}-${{ matrix.salt-version }}.log
        #name: runtests-${{ runner.os }}-py${{ matrix.python-version }}.log
        path: runtests.log
