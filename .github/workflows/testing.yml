name: Testing

on: [push, pull_request]

jobs:
  Pre-Commit:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v1
    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.5
    - name: Set Cache Key
      run: echo "::set-env name=PY::$(python --version --version | sha256sum | cut -d' ' -f1)"
    - uses: actions/cache@v1
      with:
        path: ~/.cache/pre-commit
        key: pre-commit|${{ env.PY }}|${{ hashFiles('.pre-commit-config.yaml') }}
    - uses: pre-commit/action@v1.0.1

  Linux:
    runs-on: ubuntu-latest
    needs: Pre-Commit

    timeout-minutes: 20

    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version:
          - 2.7
          - 3.5
          - 3.6
          - 3.7
        salt_version:
          - 2019.2.3

    steps:
    - uses: actions/checkout@v1

    - name: Set up Python 3.7 For Nox
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Create Cache Key Contents
      shell: bash
      run: |
        python --version --version > .cache_key
        echo "${{ matrix.salt_version }}" >> .cache_key
        echo "${{ runner.os }}" >> .cache_key
        echo "${{ hashFiles('**/requirements*.txt') }}" >> .cache_key

    - name: Set Cache Key
      id: cache-vars
      run: |
        echo "::set-output name=cache_key::${{ hashFiles('.cache_key') }}"

    - name: Set up cache
      uses: actions/cache@v1
      with:
        path: .nox
        key: venv-${{ steps.cache-vars.outputs.cache_key }}

    - name: Install Test Requirements
      env:
        USE_SYSTEM_PYTHON: YES
        SALT_REQUIREMENT: salt==${{ matrix.salt_version }}
      run: |
        nox --force-color -e tests-system-python --install-only

    - name: Test
      env:
        USE_SYSTEM_PYTHON: YES
        SALT_REQUIREMENT: salt==${{ matrix.salt_version }}
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-system-python -- -s --log-cli-level=warning --log-file-level=debug --log-file=runtests.log --junitxml=junit-report.xml

    - name: Upload Test Results
      if: always()
      shell: bash
      env:
        CHECK_RUN_REPORTER_LABEL: 'Tests'
        CHECK_RUN_REPORTER_REPORT_GLOB: '**/junit-*.xml'
        CHECK_RUN_REPORTER_REPO_TOKEN: ${{ secrets.CHECK_RUN_REPORTER_REPO_TOKEN }}
      run: |
        curl https://www.check-run-reporter.com/api/v1/submissions \
          --user token:$CHECK_RUN_REPORTER_REPO_TOKEN \
          -X POST \
          -F report=@"./junit-report.xml" \
          -F root="$(pwd)" \
          -F sha="$GITHUB_SHA" \
          -F label=$CHECK_RUN_REPORTER_LABEL

    - name: Create CodeCov Flags
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{},salt_{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info) ,'_'.join(str(v) for v in '${{ matrix.salt_version }}'.split('.')))")

    - name: Upload Code Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        #file: ./coverage.xml #optional
        flags: ${{ steps.codecov-flags.outputs.flags }}
        name: ${{ runner.os }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt_version }} #optional
        #yml: ./codecov.yml #optional
        fail_ci_if_error: true #optional (default = false)

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: runtests-ubuntu-py${{ matrix.python-version }}-salt-${{ matrix.salt_version }}.log
        path: runtests.log

  Windows:
    runs-on: windows-latest
    needs: Pre-Commit

    timeout-minutes: 40

    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version:
#          - 2.7
          - 3.5
          - 3.6
#          - 3.7
        salt_version:
          - 2019.2.3

    steps:
    - uses: actions/checkout@v1

    - name: Set up Python 3.7 For Nox
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Create Cache Key Contents
      shell: bash
      run: |
        python --version --version > .cache_key
        echo "${{ matrix.salt_version }}" >> .cache_key
        echo "${{ runner.os }}" >> .cache_key
        echo "${{ hashFiles('**/requirements*.txt') }}" >> .cache_key

    - name: Set Cache Key
      id: cache-vars
      shell: bash
      run: |
        echo "::set-output name=cache_key::${{ hashFiles('.cache_key') }}"

    - name: Set up cache
      uses: actions/cache@v1
      with:
        path: .nox
        key: venv-${{ steps.cache-vars.outputs.cache_key }}

    - name: Install Test Requirements
      shell: bash
      env:
        USE_SYSTEM_PYTHON: YES
        SALT_REQUIREMENT: salt==${{ matrix.salt_version }}
      run: |
        export PATH="/C/Program Files (x86)/Windows Kits/10/bin/10.0.18362.0/x64;$PATH"
        nox --force-color -e tests-system-python --install-only

    - name: Test
      shell: bash
      env:
        USE_SYSTEM_PYTHON: YES
        SALT_REQUIREMENT: salt==${{ matrix.salt_version }}
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        export PATH="/C/Program Files (x86)/Windows Kits/10/bin/10.0.18362.0/x64;$PATH"
        nox --force-color -e tests-system-python -- -s --log-cli-level=debug --log-file-level=debug --log-file=runtests.log --junitxml=junit-report.xml

    - name: Upload Test Results
      if: always()
      shell: bash
      env:
        CHECK_RUN_REPORTER_LABEL: 'Tests'
        CHECK_RUN_REPORTER_REPORT_GLOB: '**/junit-*.xml'
        CHECK_RUN_REPORTER_REPO_TOKEN: ${{ secrets.CHECK_RUN_REPORTER_REPO_TOKEN }}
      run: |
        curl https://www.check-run-reporter.com/api/v1/submissions \
          --user token:$CHECK_RUN_REPORTER_REPO_TOKEN \
          -X POST \
          -F report=@"./junit-report.xml" \
          -F root="$(pwd)" \
          -F sha="$GITHUB_SHA" \
          -F label=$CHECK_RUN_REPORTER_LABEL

    - name: Create CodeCov Flags
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{},salt_{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info) ,'_'.join(str(v) for v in '${{ matrix.salt_version }}'.split('.')))")

    - name: Upload Code Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        #file: ./coverage.xml #optional
        flags: ${{ steps.codecov-flags.outputs.flags }}
        name: ${{ runner.os }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt_version }} #optional
        #yml: ./codecov.yml #optional
        fail_ci_if_error: true #optional (default = false)

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: runtests-windows-py${{ matrix.python-version }}-salt-${{ matrix.salt_version }}.log
        path: runtests.log

  macOS:
    runs-on: macOS-latest
    needs: Pre-Commit

    timeout-minutes: 40

    strategy:
      fail-fast: false
      max-parallel: 4
      matrix:
        python-version:
          - 2.7
          - 3.5
          - 3.6
          - 3.7
        salt_version:
          - 2019.2.3

    steps:
    - uses: actions/checkout@v1

    - name: Set up Python 3.7 For Nox
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - name: Install Nox
      run: |
        python -m pip install --upgrade pip
        pip install nox

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python-version }}

    - name: Create Cache Key Contents
      shell: bash
      run: |
        python --version --version > .cache_key
        echo "${{ matrix.salt_version }}" >> .cache_key
        echo "${{ runner.os }}" >> .cache_key
        echo "${{ hashFiles('**/requirements*.txt') }}" >> .cache_key

    - name: Set Cache Key
      id: cache-vars
      run: |
        echo "::set-output name=cache_key::${{ hashFiles('.cache_key') }}"

    - name: Set up cache
      uses: actions/cache@v1
      with:
        path: .nox
        key: venv-${{ steps.cache-vars.outputs.cache_key }}

    - name: Install Test Requirements
      env:
        USE_SYSTEM_PYTHON: YES
        SALT_REQUIREMENT: salt==${{ matrix.salt_version }}
      run: |
        nox --force-color -e tests-system-python --install-only

    - name: Test
      env:
        USE_SYSTEM_PYTHON: YES
        SALT_REQUIREMENT: salt==${{ matrix.salt_version }}
        SKIP_REQUIREMENTS_INSTALL: YES
      run: |
        nox --force-color -e tests-system-python -- -s --log-cli-level=warning --log-file-level=debug --log-file=runtests.log --junitxml=junit-report.xml

    - name: Upload Test Results
      if: always()
      shell: bash
      env:
        CHECK_RUN_REPORTER_LABEL: 'Tests'
        CHECK_RUN_REPORTER_REPORT_GLOB: '**/junit-*.xml'
        CHECK_RUN_REPORTER_REPO_TOKEN: ${{ secrets.CHECK_RUN_REPORTER_REPO_TOKEN }}
      run: |
        curl https://www.check-run-reporter.com/api/v1/submissions \
          --user token:$CHECK_RUN_REPORTER_REPO_TOKEN \
          -X POST \
          -F report=@"./junit-report.xml" \
          -F root="$(pwd)" \
          -F sha="$GITHUB_SHA" \
          -F label=$CHECK_RUN_REPORTER_LABEL

    - name: Create CodeCov Flags
      id: codecov-flags
      run: |
        echo ::set-output name=flags::$(python -c "import sys; print('{},{},salt_{}'.format('${{ runner.os }}'.replace('-latest', ''), 'py{}{}'.format(*sys.version_info) ,'_'.join(str(v) for v in '${{ matrix.salt_version }}'.split('.')))")

    - name: Upload Code Coverage
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        #file: ./coverage.xml #optional
        flags: ${{ steps.codecov-flags.outputs.flags }}
        name: ${{ runner.os }}-Py${{ matrix.python-version }}-Salt${{ matrix.salt_version }} #optional
        #yml: ./codecov.yml #optional
        fail_ci_if_error: true #optional (default = false)

    - name: Upload Logs
      if: always()
      uses: actions/upload-artifact@master
      with:
        name: runtests-macos-py${{ matrix.python-version }}-salt-${{ matrix.salt_version }}.log
        path: runtests.log
